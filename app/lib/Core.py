# Waring!
# This file is important for MayDOS Community Edition
# DO NOT EDIT THIS FILE though you are the professional engineer
# If you find bugs, please send pr at github

#Import modules

import base64
import os
import sys
import time

#Tool Box class
class ToolBox():
    '''Toolbox Class'''
    def clear():
        print('\033c')
    
    def waitkey():
        os.system('pause')

    def writeto(text,path):
        os.system('echo '+text+">"+path)
    def addto(text,path):
        os.system('echo '+text+">>"+path)
    def readfile(path):
        with open(path,'r',encoding='utf-8') as f:
            return f.read()

#Console Style
class Style:
    END = '\33[0m'
    BOLD = '\33[1m'
    ITALIC = '\33[3m'
    URL = '\33[4m'
    BLINK = '\33[5m'
    BLINK2 = '\33[6m'
    SELECTED = '\33[7m'


class Font:
    BLACK = '\33[30m'
    RED = '\33[31m'
    GREEN = '\33[32m'
    YELLOW = '\33[33m'
    BLUE = '\33[34m'
    VIOLET = '\33[35m'
    BEIGE = '\33[36m'
    WHITE = '\33[37m'


class Background:
    BLACK = '\33[40m'
    RED = '\33[41m'
    GREEN = '\33[42m'
    YELLOW = '\33[43m'
    BLUE = '\33[44m'
    VIOLET = '\33[45m'
    BEIGE = '\33[46m'
    WHITE = '\33[47m'

class Encrypter:
    def encB64str(strarry:list):
        '''Get Base64 Str from a arry'''
        txt = ''
        for i in strarry:
            p = str(base64.b64encode(bytes(i,encoding="utf-8")),encoding='utf-8')
            txt += p
            txt +='.'
        return txt
    
    def decB64str(strf:str):
        '''Decode Base64 Str from a string'''
        resar = []
        strt = strf.split('.')
        for i in strt:
            res = str(base64.b64decode(i),encoding='utf-8')
            resar.append(res)
        return resar

class Progressbar:
    def __init__(self, message: str="正在更新中", mode: int=0, sleep_time: float=0.02):
        self.mode: int = mode
        self.message: str = message
        self.sleep_time: float = sleep_time

    def start(self):
        if self.mode == 0:
            for i in range(1, 101):
                print('\r', end="")
                print(str(self.message), f"{i}%", "▌" * (i // 2), end='')
                sys.stdout.flush()
                time.sleep(self.sleep_time) #刷新输出区，否则以上进度条不会立马显示
        if self.mode == 1:
            for i in range(1, 101):
                print('\r', end="")
                print(str(self.message), f"{i}%", "▋" * (i // 2), end='')
                sys.stdout.flush()
                time.sleep(self.sleep_time) #刷新输出区，否则以上进度条不会立马显示